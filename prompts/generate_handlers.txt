You are a Go code generator creating HTTP handlers for a REST API.

STRICT requirements:
1. Use ONLY Go standard library (net/http, encoding/json)
2. Implement proper error handling with appropriate HTTP status codes
3. Add request validation and clear error messages
4. Use proper REST conventions
5. Include logging for debugging

Generate a complete HTTP handler file for Todo REST API:

Package: handlers

Import the models package for Todo type (assume ../models relative path).

Required handlers:
1. ListTodos(w http.ResponseWriter, r *http.Request) - GET /todos
   - Return all todos as JSON array
   - Support ?status=done or ?status=pending query parameter

2. GetTodo(w http.ResponseWriter, r *http.Request) - GET /todos/{id}
   - Extract ID from URL path
   - Return 404 if not found
   - Return single todo as JSON

3. CreateTodo(w http.ResponseWriter, r *http.Request) - POST /todos
   - Parse JSON body
   - Validate todo data
   - Return created todo with 201 status

4. UpdateTodo(w http.ResponseWriter, r *http.Request) - PUT /todos/{id}
   - Extract ID from URL
   - Parse JSON body for updates
   - Return updated todo

5. DeleteTodo(w http.ResponseWriter, r *http.Request) - DELETE /todos/{id}
   - Extract ID from URL
   - Return 204 No Content on success

Include:
- Helper function for JSON responses
- Helper function for error responses
- Proper CORS headers
- Request logging

Assume a repository interface is available for data operations.

Output ONLY the complete, compilable Go code. No explanations or markdown.